% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_nopt.R
\name{find_nopt}
\alias{find_nopt}
\title{Find optimal number of particles}
\usage{
find_nopt(
  sigma0,
  proportion_obs0,
  x0 = 1,
  death_rate,
  ptree,
  day = 0,
  noisy_prevalence,
  sigma_mean = 0.1,
  pobs_prior = "uniform",
  pobs_min = 0,
  pobs_max = 1,
  pobs_alpha = 1,
  pobs_beta = 1,
  x0_prior = "uniform",
  x0_min = 1,
  x0_max = Inf,
  x0_mean = 10,
  x0_var = 100,
  ess_threshold_prop = 0.5,
  resampling_scheme = "systematic",
  print = F
)
}
\arguments{
\item{sigma0}{initial value of the linear gaussian standard deviation.}

\item{proportion_obs0}{initial value of the proportion of cases observed.}

\item{x0}{prevalence on day 0.}

\item{death_rate}{death rate of the epidemic.}

\item{ptree}{object of class phylo.}

\item{day}{number of days in the past the most recent leaf was sampled.}

\item{noisy_prevalence}{data frame of observed prevalence per day.}

\item{sigma_mean}{exponential prior mean of sigma.}

\item{pobs_prior}{"uniform" or "beta"; prior distribution on reporting probability.}

\item{pobs_min}{minimum for uniform reporting probability prior.}

\item{pobs_max}{maximum for uniform reporting probability prior.}

\item{pobs_alpha}{shape1 for beta reporting probability prior.}

\item{pobs_beta}{shape2 for beta reporting probability prior.}

\item{x0_prior}{"uniform" or "nbinom"; prior distribution on day 0 prevalence.}

\item{x0_min}{minimum for uniform day 0 prevalence prior.}

\item{x0_max}{maximum for uniform day 0 prevalence prior.}

\item{x0_mean}{mean for negative binomial day 0 prevalence prior.}

\item{x0_var}{variance for negative binomial day 0 prevalence prior.}

\item{resampling_scheme}{"multinomial" or "systematic".}

\item{print}{logical; if TRUE, prints percentage of the way through the chain.}
}
\value{
optimal number of particles
}
\description{
Find optimal number of particles
}
\examples{
find_nopt(sigma0 = 0.1, proportion_obs0 = 0.5, death_rate = 0.1, ptree = sample_tree, day = 1, noisy_prevalence = noisy_prev, print = T)
}
